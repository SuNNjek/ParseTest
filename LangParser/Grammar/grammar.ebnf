type = "void" | "byte" | "int" | "float" | "bool" | "string" | "object".

unary_operator = "!" | "-" | "+".
additive_operator = "+" | "-".
multiplicative_operator = "*" | "/".
relational_operator = "<" | ">" | "<=" | ">=".
equality_operator = "==" | "!=";
assignment_operator = "=".

translation_unit = { function_definition }.

declaration = type identifier.
declaration_list = declaration { "," declaration }.

expression_list = expression { "," expression }.

function_definition = declaration "(" declaration_list ")" block_statement.

statement	= expression_statement
			| block_statement
			| if_statement
			| loop_statement
			| return_statement.

expression_statement = [ expression ] ";".
block_statement = "{" { statement } "}".
if_statement = "if" "(" expression ")" statement [ "else" statement ].
loop_statement	= ( "do" statement "while" "(" expression ")" ";" )
				| ( "while" "(" expression ")" statement )
				| ( "for" "(" [ expression ] ";" [ expression ] ";" [ expression ] ")" statement ).
return_statement = "return" [ expression ] ";" .

expression = assignment_expression.

assignment_expression	= logical_or_expression
						| ( ( identifier | declaration ) assignment_operator expression ).
logical_or_expression = logical_and_expression { "||" logical_or_expression }.
logical_and_expression = logical_xor_expression { "&&" logical_and_expression }.
logical_xor_expression = equality_expression { "^" logical_xor_expression }.
equality_expression = relational_expression { equality_operator equality_expression }.
relational_expression = additive_expression { relational_operator relational_expression }.
additive_expression = multiplicative_expression { additive_operator additive_expression }.
multiplicative_expression = unary_expression { multiplicative_operator multiplicative_expression }.
unary_expression = [ unary_operator ] primary_expression.

primary_expression	= identifier
					| constant
					| ( "(" expression ")" )
					| ( identifier "(" expression_list ")" ).
